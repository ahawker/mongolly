#!/usr/bin/env ruby
require 'thor'
require 'yaml'
require 'time'
require 'mongolly'

module Mongolly
  class Runner < Thor

    CONFIG_PATH = File.expand_path '~/.mongolly'

    def initialize(*args)
      super
      @config = read_config
      exit unless @config && valid_config?
    end

    desc "backup", "Snapshots the Database EBS Volumes"
    def backup
      Shepherd.new(@config).backup
    end

    desc "clean", "Removes old Database EBS Snapshots"
    method_option :age, aliases: '-a', required: true
    def clean
      age = Time.parse(options[:age])
      Shepherd.new(@config).cleanup(age)
    end

  private
    def seed_config
      return true if File.exists? CONFIG_PATH

      empty_config = {
        database: [],
        db_username: nil,
        db_password: nil,
        access_key_id: nil,
        secret_access_key: nil,
        aws_region: 'us-east-1',
      }

      File.open( CONFIG_PATH, "w" ) do |f|
        f.write( empty_config.to_yaml )
      end

      puts " ** An empty configuration file has been written to #{CONFIG_PATH}."
      puts " ** you must now edit this configuration file with your AWS Credentials,"
      puts " ** MongoDB Connection Details, and the array of volume IDs that you wish"
      puts " ** to snapshot"

      return false
    end

    def read_config
      return false unless seed_config
      begin
        return YAML::load( File.read( CONFIG_PATH ) )
      rescue e
        puts " ** Unable to read config at #{CONFIG_PATH}"
        raise e
      end
    end

    def valid_config?
      %w(database db_username db_password access_key_id secret_access_key).each do |arg|
        raise ArgumentError.new("#{arg} cannot be empty") if @config[arg.to_sym].to_s.strip.empty?
      end
      return true
    end

  end
end

Mongolly::Runner.start
